Roadmap
=======

* Make sure that proper memory padding is added in src/search/portfolios.py

* Move Plot class into lab.reports
* Add option for choosing between scattering and plotting points in ProblemPlotReport

* If rev is set for a checkout use it as a default for dest.
* add_resource use filename as default for destination filename.
* Add exp.add_report method.
* profile report generation and make it faster
  * For a big report taking 42s we spend
    - 19s converting txt2tags to html.
    - 10s generating the markup.
    -  9s decoding json. ultrajson would probably only make this ~1.15 times faster.
    -  3s scanning the planning data.
    -  1s applying filters.
* Profiling the json conversions for a big properties file:
    * json_print      44.41
    * sjson_print     45.90
    * cjson_print     5.78
    * ujson_print     2.44
    * json_read       7.32
    * sjson_read      2.92
    * cjson_read      3.28
    * ujson_read      2.49
* Profiling json conversions for a small properties file:
    * json_print      4.33
    * sjson_print     4.39
    * cjson_print     0.51
    * ujson_print     0.20
    * json_read       0.69
    * sjson_read      0.26
    * cjson_read      0.31
    * ujson_read      0.23
* Time for converting a big report to HTML
    * txt2tags (txt2tags to html): 0.81s (measured from within the markup.py module)
    * pandoc (markdown to html): 0.56s (measured for pandoc 1.11.1)
    * python-markdown (markdown to html): 1.05s (with pipe_tables)
    * python-markdown2 (markdown to html): seems fast (only supports ugly google code tables)

Maybe
-----
* Enumerate run dirs from 0 to 99 instead of 1 to 100. This yields better tab completion.

Not-todo
--------
* Warn when config or nick in filter is not present in dataset. We would need
  to enable this for all attributes. If we filter for a single item
  "filter_attr='not-here'" a warning is already shown. For lists this becomes
  trickier: We cannot easily find out if one of the values in
  "filter_attr=['here', 'not-here']" does not exist in the dataset.
* Infer outfile extension from output_format or vice-versa. This is not feasible
  (see comment in code).
